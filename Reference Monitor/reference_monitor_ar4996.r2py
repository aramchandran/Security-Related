"""
This security layer interposes on a textfile 
and gives it open, close, read and write access.
However, a user should prevent any   

1) Uppercase letters from being  replaced by lowercase letters 
2) Reads that mix upper and lower case
If a user tries to the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python
  Also you need to give it an application to run.
  This security layer never runs explicitly but instead interposes functions
  from above layers. 

"""	
# This is just an example global variable.   It stores a list of the calls the application makes.[[BR]]
BUFFER = []
class SecureFile():
  def __init__(self,privilegedfo):
	self.privilegedfo = privilegedfo
	self.lock = createlock()
	mycontext['file'] = self.privilegedfo.readat(None,0)
	
  def readat(self,bytes,offset):
	self.lock.acquire(True)
	BUFFER.append("readat")
	if not mycontext['file']:
		mycontext['file']=''
		return mycontext['file']
	if offset < 0:
		raise ValueError
	l = len(mycontext['file'])
	if bytes == None:
		bytes = len(mycontext['file'])
	if offset+bytes > l:
		self.lock.release()
		raise ValueError
	else:
		b = mycontext['file'][offset:offset+bytes]
		string_case = b[0].islower()
		for x in xrange(0, len(b)):
			if b[x].isalpha():
				letter_case = b[x].islower()
				if letter_case != string_case:
					self.lock.release()
					raise ValueError
		self.lock.release()
		return b

	def writeat(self,data,offset):
	self.lock.acquire(True)
	BUFFER.append("writeat")
	if offset < 0:
		self.lock.release()
		raise ValueError
	if not mycontext['file']:
		mycontext['file'] = data
	else:
		if offset > len(mycontext['file'])+1:
			self.lock.release()
			raise ValueError
		else:
			x = len(data)
			strt = mycontext['file'][offset:offset+x]
			for a in xrange(0, len(strt)):
				if strt[a].isupper():
					if data[a].islower():
						self.lock.release()
						raise ValueError
			mycontext['file'] = mycontext['file'][:offset] +data +mycontext['file'][offset+x:]	
	self.lock.release()	
	self.privilegedfo.writeat(mycontext['file'],0)

  def close(self):
	BUFFER.append("close")
	return self.privilegedfo.close()

def secure_openfile(filename, create):
  
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  try:
	privilegedfo = openfile(filename,create)
  except:
	raise ValueError
  else:
	return SecureFile(privilegedfo)
# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()
